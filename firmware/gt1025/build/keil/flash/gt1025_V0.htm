<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\flash\gt1025_V0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\flash\gt1025_V0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Feb 28 23:32:53 2016
<BR><P>
<H3>Maximum Stack Usage =       1828 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Ampm_MainSmsRecvCallback &rArr; CMD_CfgParse &rArr; DB_Print &rArr; DB__Print1 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[240]">send_cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[240]">send_cmd</a><BR>
 <LI><a href="#[241]">MMC_disk_ioctl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[241]">MMC_disk_ioctl</a><BR>
 <LI><a href="#[12f]">scan_files</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">scan_files</a><BR>
 <LI><a href="#[104]">DB_RemoveDir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[104]">DB_RemoveDir</a><BR>
 <LI><a href="#[27c]">PPP__ThisLayerFinished</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[275]">PPP__ManageState</a><BR>
 <LI><a href="#[27b]">PPP__ThisLayerUp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[275]">PPP__ManageState</a><BR>
 <LI><a href="#[277]">PPP__SendConfigReq</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[275]">PPP__ManageState</a><BR>
 <LI><a href="#[274]">PPP__ThisLayerDown</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[275]">PPP__ManageState</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">Ampm_GSM_GetATI</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[1a5]">Ampm_GSM_GetIMEI</a> from ampm_gsm_startup.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[1a4]">Ampm_GSM_GetSimCID</a> from ampm_gsm_startup.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[4b]">Ampm_GetServiceCenterNumber</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[4e]">Ampm_GsmCREG</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[3b]">Ampm_GsmGetCSQ</a> from ampm_gsm_common.o(.text) referenced from ampm_gsm_common.o(.constdata)
 <LI><a href="#[3b]">Ampm_GsmGetCSQ</a> from ampm_gsm_common.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[45]">Ampm_GsmMainCallPhaseFinished</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.constdata)
 <LI><a href="#[43]">Ampm_GsmRecvCallback</a> from ampm_gsm_io.o(.text) referenced 22 times from ampm_gsm_common.o(.constdata)
 <LI><a href="#[43]">Ampm_GsmRecvCallback</a> from ampm_gsm_io.o(.text) referenced from ampm_gsm_io.o(.text)
 <LI><a href="#[42]">Ampm_GsmSendCallback</a> from ampm_gsm_io.o(.text) referenced 22 times from ampm_gsm_common.o(.constdata)
 <LI><a href="#[42]">Ampm_GsmSendCallback</a> from ampm_gsm_io.o(.text) referenced from ampm_gsm_io.o(.text)
 <LI><a href="#[4a]">Ampm_GsmSmsRecv0</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[48]">Ampm_GsmSmsRecv1</a> from ampm_gsm_sms.o(.text) referenced 2 times from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[49]">Ampm_GsmSmsRecv2</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[47]">Ampm_GsmSmsRecvCallback_CMGD</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[46]">Ampm_GsmSmsRecvCallback_CMGR</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[51]">Ampm_GsmSmsSendCallback_CMGF</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[4c]">Ampm_GsmSmsSendCallback_CMGS</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[50]">Ampm_GsmSmsSendCallback_CSCA</a> from ampm_gsm_sms.o(.text) referenced 2 times from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[4d]">Ampm_GsmSmsSendMessageCallback</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[4f]">Ampm_GsmSmsSent</a> from ampm_gsm_sms.o(.text) referenced from ampm_gsm_sms.o(.constdata)
 <LI><a href="#[39]">Ampm_MainSmsRecvCallback</a> from main.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[180]">Ampm_MainSwithToIdle</a> from ampm_gsm_main_task.o(.text) referenced from ampm_gsm_main_task.o(.text)
 <LI><a href="#[56]">Ampm_SMS_Process</a> from ampm_gsm_sms.o(.text) referenced 3 times from at_command_parser.o(.constdata)
 <LI><a href="#[55]">Ampm_SMS_ReadMsg</a> from ampm_gsm_sms.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[54]">Ampm_SMS_URC_Incomming</a> from ampm_gsm_sms.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[3c]">Ampm_SetCmdOK</a> from ampm_gsm_io.o(.text) referenced from ampm_gsm_startup.o(.text)
 <LI><a href="#[52]">Ampm_URC_CLIP_Process</a> from at_command_parser.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[53]">Ampm_URC_RING_Process</a> from at_command_parser.o(.text) referenced from at_command_parser.o(.constdata)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">DialupAtCallback0</a> from ampm_gsm_dial_up.o(.text) referenced from ampm_gsm_dial_up.o(.constdata)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[118]">FIRMWARE_Callback</a> from firmware_task.o(.text) referenced from firmware_task.o(.text)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28a]">FTPGetFileName</a> from ftp.o(.text) referenced from ftp.o(.text)
 <LI><a href="#[289]">FTPGetPass</a> from ftp.o(.text) referenced from ftp.o(.text)
 <LI><a href="#[288]">FTPGetUser</a> from ftp.o(.text) referenced from ftp.o(.text)
 <LI><a href="#[286]">FTPListFile</a> from ftp.o(.text) referenced from ftp.o(.text)
 <LI><a href="#[58]">GPGGA_Process</a> from gps.o(.text) referenced from gps.o(.constdata)
 <LI><a href="#[59]">GPGSA_Process</a> from gps.o(.text) referenced from gps.o(.constdata)
 <LI><a href="#[5a]">GPGSV_Process</a> from gps.o(.text) referenced from gps.o(.constdata)
 <LI><a href="#[57]">GPRMC_Process</a> from gps.o(.text) referenced from gps.o(.constdata)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from tick.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from main.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from buzzer.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[133]">TRACKING_SVR_Callback</a> from tracking_server.o(.text) referenced from tracking_server.o(.text)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from uart1.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from uart2.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from uart3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5b]">USB_EndPoint0</a> from usbcore.o(.text) referenced from usbuser.o(.constdata)
 <LI><a href="#[5c]">USB_EndPoint1</a> from usbuser.o(.text) referenced from usbuser.o(.constdata)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from usbhw.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3e]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[3f]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[3d]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[41]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[41]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[295]">ftpc_control_appcall</a> from ftpc.o(.text) referenced from ftpc.o(.text)
 <LI><a href="#[291]">ftpc_data_appcall</a> from ftpc.o(.text) referenced from ftpc.o(.text)
 <LI><a href="#[40]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[35]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[253]">resolv_appcall</a> from resolv.o(.text) referenced from resolv.o(.text)
 <LI><a href="#[37]">vTcpIpTask</a> from tcp_ip_task.o(.text) referenced from main.o(.text)
 <LI><a href="#[36]">vTcpIpTaskInit</a> from tcp_ip_task.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[2c1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2c2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2c3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2c4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2c5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2c6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>Ampm_MainSmsRecvCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1828<LI>Call Chain = Ampm_MainSmsRecvCallback &rArr; CMD_CfgParse &rArr; DB_Print &rArr; DB__Print1 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>SysSleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRun
</UL>

<P><STRONG><a name="[60]"></a>GSM_GPRS_Task</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500<LI>Call Chain = GSM_GPRS_Task &rArr; TrackerTask &rArr; DB_Print &rArr; DB__Print1 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTaskInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbConfigTask
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerGetNewData
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Control
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromLog
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_ReLoad
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Input
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelerometer_Task_MMA7660
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRun
</UL>

<P><STRONG><a name="[75]"></a>AppRun</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1508<LI>Call Chain = AppRun &rArr; GSM_GPRS_Task &rArr; TrackerTask &rArr; DB_Print &rArr; DB__Print1 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_TaskInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFirmwareFile
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>TIMER2_Init</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[79]"></a>SysInit</STRONG> (Thumb, 564 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = SysInit &rArr; DB_Init &rArr; mscInit &rArr; scan_files &rArr;  scan_files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbConfigTaskInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutString
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICK_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleSetStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Enable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FlashMemInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelerometerTaskInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1508<LI>Call Chain = main &rArr; AppRun &rArr; GSM_GPRS_Task &rArr; TrackerTask &rArr; DB_Print &rArr; DB__Print1 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2c7]"></a>SysWakeUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>SysDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; IO_ToggleTask &rArr; InitPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>ResetMcuSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[67]"></a>ResetMcuTask</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ResetMcuTask &rArr; DB_SaveAll &rArr; DB_U32Save &rArr; SST25_Write &rArr; _SST25_Write &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveAll
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[73]"></a>CFG_ReLoad</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CFG_ReLoad
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[6e]"></a>CFG_Save</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CFG_Save &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[96]"></a>CFG_Load</STRONG> (Thumb, 2302 bytes, Stack size 24 bytes, system_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CFG_Load &rArr; CFG_Save &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
</UL>

<P><STRONG><a name="[2c9]"></a>CFG_CheckSum</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, system_config.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>IO_Init</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[71]"></a>IO_Control</STRONG> (Thumb, 508 bytes, Stack size 12 bytes, hw_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IO_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[7e]"></a>GPS_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[2ca]"></a>GPS_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_config.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>TrackerInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tracker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = TrackerInit &rArr; DB_InitLog &rArr; DB_LoadEndLog &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_InitLog
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cb]"></a>TRACKER_Pause</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tracker.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>TRACKER_Resume</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tracker.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>GetDataFromLog</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tracker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GetDataFromLog &rArr; DB_LoadNextLog &rArr; DB_LoadLog &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogNext
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadNextLog
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[72]"></a>TrackerTask</STRONG> (Thumb, 2910 bytes, Stack size 48 bytes, tracker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1452<LI>Call Chain = TrackerTask &rArr; DB_Print &rArr; DB__Print1 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRtcTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromGps
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInfo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Save
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveLog
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Print
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveAll
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleSetStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[6f]"></a>TrackerGetNewData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tracker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Callback
</UL>

<P><STRONG><a name="[2cd]"></a>TrackerCrc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tracker.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>AddTrackerPacket</STRONG> (Thumb, 988 bytes, Stack size 96 bytes, tracker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = AddTrackerPacket &rArr; TIME_FromSec &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Callback
</UL>

<P><STRONG><a name="[2ce]"></a>PrintTrackerInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tracker.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>ADC_Task</STRONG> (Thumb, 510 bytes, Stack size 64 bytes, adc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ADC_Task &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[c8]"></a>ADC_TaskDeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_TaskDeInit &rArr; ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[84]"></a>ADC_TaskInit</STRONG> (Thumb, 294 bytes, Stack size 72 bytes, adc_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADC_TaskInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[77]"></a>SMS_TaskInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMS_TaskInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRun
</UL>

<P><STRONG><a name="[dd]"></a>UniConfigParser</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UniConfigParser &rArr; utf8s_to_ucs2s
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8s_to_ucs2s
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unilen
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uni_srtsrt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big2litel_endian
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Callback
</UL>

<P><STRONG><a name="[e3]"></a>FindAllPhone</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindAllPhone &rArr; Ampm_ComparePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[5f]"></a>CMD_CfgParse</STRONG> (Thumb, 3256 bytes, Stack size 416 bytes, sms_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1820<LI>Call Chain = CMD_CfgParse &rArr; DB_Print &rArr; DB__Print1 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8s_to_ucs2s
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unilen
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big2litel_endian
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogReset
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber_1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAllPhone
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Print
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSmsRecvCallback
</UL>

<P><STRONG><a name="[76]"></a>LoadFirmwareFile</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LoadFirmwareFile &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRun
</UL>

<P><STRONG><a name="[f1]"></a>AppConfigTaskInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AppConfigTaskInit &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbConfigTaskInit
</UL>

<P><STRONG><a name="[f3]"></a>DbgCfgPrintf</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Input
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetIMEI
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetSimCID
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingProcess
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_control_appcall
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acked
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_put
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_list
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__In
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Timer
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__CheckLCPOptions
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerStarted
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerFinished
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerUp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigAck
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigNackRej
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermAck
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendCodeRej
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerDown
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermReq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendEchoReply
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ChangeId
</UL>

<P><STRONG><a name="[f7]"></a>CfgCalcCheckSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CfgCalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
</UL>

<P><STRONG><a name="[f6]"></a>CfgProcessData</STRONG> (Thumb, 2846 bytes, Stack size 80 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = CfgProcessData &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed_Pause
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed_Continue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgCalcCheckSum
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveAll
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleSetStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbConfigTask
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
</UL>

<P><STRONG><a name="[11a]"></a>CfgParserPacket</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, app_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CfgParserPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbConfigTask
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
</UL>

<P><STRONG><a name="[99]"></a>DB_SaveAll</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DB_SaveAll &rArr; DB_U32Save &rArr; SST25_Write &rArr; _SST25_Write &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Save
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FloatToU32
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuTask
</UL>

<P><STRONG><a name="[86]"></a>DB_FlashMemInit</STRONG> (Thumb, 838 bytes, Stack size 24 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DB_FlashMemInit &rArr; DB_InitLog &rArr; DB_LoadEndLog &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRtcTime
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_InitLog
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Load
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[87]"></a>DB_Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = DB_Init &rArr; mscInit &rArr; scan_files &rArr;  scan_files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleSetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[104]"></a>DB_RemoveDir</STRONG> (Thumb, 158 bytes, Stack size 144 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + In Cycle
<LI>Call Chain = DB_RemoveDir &rArr;  DB_RemoveDir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RemoveDir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_CreateHierarchy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RemoveDir
</UL>

<P><STRONG><a name="[107]"></a>DB_CreateHierarchy</STRONG> (Thumb, 234 bytes, Stack size 104 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = DB_CreateHierarchy &rArr; DB_RemoveDir &rArr;  DB_RemoveDir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_AddSec
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RemoveDir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
</UL>

<P><STRONG><a name="[f8]"></a>DB_SaveSpeed_Pause</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = DB_SaveSpeed_Pause &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[fc]"></a>DB_SaveSpeed_Continue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, database_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[ba]"></a>DB_SaveSpeed</STRONG> (Thumb, 432 bytes, Stack size 80 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = DB_SaveSpeed &rArr; DB_CreateHierarchy &rArr; DB_RemoveDir &rArr;  DB_RemoveDir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_CreateHierarchy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
</UL>

<P><STRONG><a name="[10c]"></a>GetLastRecord</STRONG> (Thumb, 240 bytes, Stack size 720 bytes, database_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10d]"></a>DB__Print2</STRONG> (Thumb, 708 bytes, Stack size 816 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212<LI>Call Chain = DB__Print2 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutString
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Print
</UL>

<P><STRONG><a name="[10e]"></a>DB__Print1</STRONG> (Thumb, 2114 bytes, Stack size 984 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380<LI>Call Chain = DB__Print1 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutString
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLatLng
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Print
</UL>

<P><STRONG><a name="[b1]"></a>DB_Print</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, database_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404<LI>Call Chain = DB_Print &rArr; DB__Print1 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[7b]"></a>TICK_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TICK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[2cf]"></a>TICK_DeInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tick.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_timerproc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IO_ToggleSetStatus</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IO_ToggleSetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[7f]"></a>IO_ToggleInit</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IO_ToggleInit &rArr; IO_ToggleSetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleSetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[112]"></a>IO_ToggleProcess</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleTask
</UL>

<P><STRONG><a name="[98]"></a>IO_ToggleTask</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IO_ToggleTask &rArr; InitPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWM
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitPWM
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>FirmwareTask_IsBusy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, firmware_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
</UL>

<P><STRONG><a name="[128]"></a>FIRMWARE_Task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, firmware_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
</UL>

<P><STRONG><a name="[116]"></a>FIRMWARE_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, firmware_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FIRMWARE_Init &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTaskInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
</UL>

<P><STRONG><a name="[117]"></a>FIRMWARE_Reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, firmware_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FIRMWARE_Reset &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
</UL>

<P><STRONG><a name="[118]"></a>FIRMWARE_Callback</STRONG> (Thumb, 846 bytes, Stack size 16 bytes, firmware_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = FIRMWARE_Callback &rArr; CfgProcessData &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgParserPacket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgCalcCheckSum
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> firmware_task.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>FIRMWARE_Manage</STRONG> (Thumb, 1160 bytes, Stack size 32 bytes, firmware_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FIRMWARE_Manage &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgCalcCheckSum
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Lookup
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Domain_IpCheck
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Reset
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
</UL>

<P><STRONG><a name="[36]"></a>vTcpIpTaskInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcp_ip_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTcpIpTaskInit &rArr; TRACKING_SVR_Init &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>vTcpIpTask</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tcp_ip_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148<LI>Call Chain = vTcpIpTask &rArr; FTP_Manage &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Reset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Reset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Reset
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>AccelerometerTaskInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, accelerometer_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AccelerometerTaskInit &rArr; MMA7660_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelerometer_Task_MMA7660
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[74]"></a>Accelerometer_Task_MMA7660</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, accelerometer_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Accelerometer_Task_MMA7660 &rArr; AccelerometerTaskInit &rArr; MMA7660_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelerometerTaskInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_ReadStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[113]"></a>InitPWM</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleTask
</UL>

<P><STRONG><a name="[114]"></a>DeInitPWM</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, buzzer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_ToggleTask
</UL>

<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, buzzer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>CfgUSBSendData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usb_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CfgUSBSendData &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbConfigTask
</UL>

<P><STRONG><a name="[65]"></a>UsbConfigTask</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, usb_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = UsbConfigTask &rArr; CfgProcessData &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgParserPacket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgUSBSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[8e]"></a>UsbConfigTaskInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_config_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UsbConfigTaskInit &rArr; AppConfigTaskInit &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConfigTaskInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[12f]"></a>scan_files</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, msc_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + In Cycle
<LI>Call Chain = scan_files &rArr;  scan_files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
</UL>

<P><STRONG><a name="[a7]"></a>mscInit</STRONG> (Thumb, 82 bytes, Stack size 600 bytes, msc_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = mscInit &rArr; scan_files &rArr;  scan_files (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Init
</UL>

<P><STRONG><a name="[125]"></a>TRACKING_SVR_Reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tracking_server.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Init
</UL>

<P><STRONG><a name="[122]"></a>TRACKING_SVR_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tracking_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TRACKING_SVR_Init &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTaskInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
</UL>

<P><STRONG><a name="[133]"></a>TRACKING_SVR_Callback</STRONG> (Thumb, 686 bytes, Stack size 8 bytes, tracking_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = TRACKING_SVR_Callback &rArr; AddTrackerPacket &rArr; TIME_FromSec &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniConfigParser
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerGetNewData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tracking_server.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>TRACKING_SVR_Manage</STRONG> (Thumb, 1290 bytes, Stack size 32 bytes, tracking_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TRACKING_SVR_Manage &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ReInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Reset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Lookup
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Domain_IpCheck
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[2d0]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[2d4]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[2d5]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[137]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[9e]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[139]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13a]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[13b]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[13d]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[13c]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a0]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
</UL>

<P><STRONG><a name="[13e]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13f]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[140]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[141]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[142]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2d6]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2dd]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>USART1_Init</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_UartInit
</UL>

<P><STRONG><a name="[2de]"></a>USART1_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>USART1_PutChar</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutString
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>

<P><STRONG><a name="[145]"></a>USART1_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_PutString &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
</UL>

<P><STRONG><a name="[2df]"></a>USART1_GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART1_IRQHandler &rArr; AT_ComnandParser &rArr; StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>USART2_Init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[2e0]"></a>USART2_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>USART2_PutChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>USART2_GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; GPS_ComnandParser
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ComnandParser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>USART3_Init</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_Print
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[2e3]"></a>USART3_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>USART3_PutChar</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutString
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[8c]"></a>USART3_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_PutString &rArr; USART3_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
</UL>

<P><STRONG><a name="[2e4]"></a>USART3_GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>I2C_Init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Init
</UL>

<P><STRONG><a name="[14c]"></a>I2C_CheckStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckSlaveStatus
</UL>

<P><STRONG><a name="[1db]"></a>I2C_ReadByte</STRONG> (Thumb, 496 bytes, Stack size 20 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Read
</UL>

<P><STRONG><a name="[2e5]"></a>I2C_SendByte</STRONG> (Thumb, 268 bytes, Stack size 12 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>I2C_SendData</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Write
</UL>

<P><STRONG><a name="[14b]"></a>I2C_CheckSlaveStatus</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckStatus
</UL>

<P><STRONG><a name="[245]"></a>SPI_InitLowFreq</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>

<P><STRONG><a name="[1d0]"></a>SPI_InitHighFreq</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>

<P><STRONG><a name="[2e6]"></a>SPI_DeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>halSpiWriteByte</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__GlobalProtect
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteDisable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
</UL>

<P><STRONG><a name="[23f]"></a>halSpiWriteMutilByte</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = halSpiWriteMutilByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
</UL>

<P><STRONG><a name="[23d]"></a>halSpiReadMutilByte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = halSpiReadMutilByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounterX
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[14d]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounterX
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[a2]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>RTC_SetCounter</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RTCAlarm_IRQHandler &rArr; TIME_FromSec &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>RTC_SanityCheck</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[7c]"></a>RTC_Init</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Init &rArr; USART3_PutString &rArr; USART3_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutString
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SanityCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[151]"></a>RTC_SetCounterX</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
</UL>

<P><STRONG><a name="[7d]"></a>EXTI_Init</STRONG> (Thumb, 746 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, exti.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exti.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, exti.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exti.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exti.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetRinging
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exti.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[157]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2e7]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[ce]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2f6]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2f7]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[db]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2fa]"></a>DMA_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskDeInit
</UL>

<P><STRONG><a name="[cf]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2fc]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[d2]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2fd]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[d6]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[d7]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[d8]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[d9]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[2fe]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[301]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[311]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[158]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[317]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[c9]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskDeInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[cc]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TaskInit
</UL>

<P><STRONG><a name="[327]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[328]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>ampm_f_putc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_sprintf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_puts
</UL>

<P><STRONG><a name="[15a]"></a>ampm_f_puts</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ampm_sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
</UL>

<P><STRONG><a name="[15c]"></a>ampm_vsprintf</STRONG> (Thumb, 686 bytes, Stack size 84 bytes, ampm_sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_puts
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_f_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>

<P><STRONG><a name="[15d]"></a>ampm_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ampm_sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CMGD
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CMGR
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendMessageCallback
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DialupAtCallback0
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_update_svr_file_name
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddata
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_put
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_list
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_get
</UL>

<P><STRONG><a name="[15e]"></a>InitFindData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, data_cmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitFindData
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
</UL>

<P><STRONG><a name="[17c]"></a>FindData</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, data_cmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
</UL>

<P><STRONG><a name="[e0]"></a>unilen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, encoding.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniConfigParser
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[e2]"></a>big2litel_endian</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, encoding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = big2litel_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniConfigParser
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[15f]"></a>utf8_to_ucs2</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, encoding.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8s_to_ucs2s
</UL>

<P><STRONG><a name="[de]"></a>utf8s_to_ucs2s</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, encoding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = utf8s_to_ucs2s
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_ucs2
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniConfigParser
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[32f]"></a>ucs2_to_utf8</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, encoding.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>uni_srtsrt</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, encoding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uni_srtsrt
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniConfigParser
</UL>

<P><STRONG><a name="[167]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdResetList
</UL>

<P><STRONG><a name="[1a0]"></a>list_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
</UL>

<P><STRONG><a name="[330]"></a>list_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>list_tail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[161]"></a>list_remove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[160]"></a>list_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsAddMsg
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdAddToList
</UL>

<P><STRONG><a name="[163]"></a>list_push</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>

<P><STRONG><a name="[331]"></a>list_chop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>list_pop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
</UL>

<P><STRONG><a name="[19f]"></a>list_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
</UL>

<P><STRONG><a name="[164]"></a>list_insert</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
</UL>

<P><STRONG><a name="[1a1]"></a>list_item_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
</UL>

<P><STRONG><a name="[173]"></a>gmtime_r</STRONG> (Thumb, 366 bytes, Stack size 20 bytes, m_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromGps
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromGsm
</UL>

<P><STRONG><a name="[170]"></a>mktime</STRONG> (Thumb, 1202 bytes, Stack size 44 bytes, m_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromGps
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromGsm
</UL>

<P><STRONG><a name="[f2]"></a>RINGBUF_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConfigTaskInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HID_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
</UL>

<P><STRONG><a name="[f5]"></a>RINGBUF_Put</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgUSBSendData
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_Process
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_URC_Incomming
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>

<P><STRONG><a name="[69]"></a>RINGBUF_Get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbConfigTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv0
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__In
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>

<P><STRONG><a name="[144]"></a>RINGBUF_GetFill</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv0
</UL>

<P><STRONG><a name="[165]"></a>Ampm_CmdAddToList</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sparser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[166]"></a>Ampm_CmdResetList</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sparser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>

<P><STRONG><a name="[332]"></a>Ampm_CmdCheckList_IsEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sparser.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>Ampm_CmdCheck_IsEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
</UL>

<P><STRONG><a name="[169]"></a>Ampm_CmdTask_IsIdle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sparser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RecvSms_IsFinished
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
</UL>

<P><STRONG><a name="[168]"></a>Ampm_SendCmd</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ampm_SendCmd &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
</UL>

<P><STRONG><a name="[16a]"></a>Ampm_SendCmdNow</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>

<P><STRONG><a name="[16b]"></a>Ampm_Cmd_Task</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_Cmd_Task &rArr; CheckTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_pop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[17e]"></a>StrParserInit</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StrParserInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdProcessInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
</UL>

<P><STRONG><a name="[16e]"></a>StrParserCtl</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StrParserCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrComnandParser
</UL>

<P><STRONG><a name="[16d]"></a>StrComnandParser</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, sparser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrParserCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
</UL>

<P><STRONG><a name="[333]"></a>SysTick_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_tick.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>SysTick_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_tick.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>SysTick_Task</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sys_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11b]"></a>SysTick_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Manage
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmRecvCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelayms
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Timer
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermReq
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
</UL>

<P><STRONG><a name="[335]"></a>SysTick_Get64</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_tick.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>SysTick_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ChangeId
</UL>

<P><STRONG><a name="[62]"></a>InitTimeout</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConfigTaskInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTaskInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRun
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Reset
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsGetInfo
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecvCallback_CMGR
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmdNow
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_control_appcall
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
</UL>

<P><STRONG><a name="[70]"></a>CheckTimeout</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sys_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuTask
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRun
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareTask_IsBusy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsGetInfo
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
</UL>

<P><STRONG><a name="[16f]"></a>TimerDelayms</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, sys_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>

<P><STRONG><a name="[aa]"></a>TIME_GetSec</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TIME_GetSec &rArr; mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_AddSec
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSetup
</UL>

<P><STRONG><a name="[171]"></a>SysTimeSetup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
</UL>

<P><STRONG><a name="[ac]"></a>UpdateRtcTime</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sys_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FlashMemInit
</UL>

<P><STRONG><a name="[172]"></a>TIME_FromGsm</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, sys_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[a9]"></a>TIME_FromGps</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIME_FromGps &rArr; mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
</UL>

<P><STRONG><a name="[ad]"></a>TIME_FromSec</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIME_FromSec &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FlashMemInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_AddSec
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
</UL>

<P><STRONG><a name="[108]"></a>TIME_AddSec</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TIME_AddSec &rArr; TIME_GetSec &rArr; mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_CreateHierarchy
</UL>

<P><STRONG><a name="[174]"></a>COMM_Putc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = COMM_Putc &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
</UL>

<P><STRONG><a name="[175]"></a>COMM_Puts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = COMM_Puts &rArr; USART1_PutString &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSendCallback
</UL>

<P><STRONG><a name="[285]"></a>COMM_CarrierDetected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[336]"></a>MODEM_RTS_Set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>MODEM_RTS_Clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>MODEM_DTR_Set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>MODEM_DTR_Clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[1a7]"></a>MODEM_MOSFET_On</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[1a6]"></a>MODEM_MOSFET_Off</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[1aa]"></a>MODEM_POWER_Set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[1ab]"></a>MODEM_POWER_Clr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[1a9]"></a>MODEM_RESET_Set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[1ac]"></a>MODEM_RESET_Clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[176]"></a>MODEM_UartInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MODEM_UartInit &rArr; USART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[ea]"></a>Ampm_ComparePhoneNumber_1</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_ComparePhoneNumber_1
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[e4]"></a>Ampm_ComparePhoneNumber</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ampm_gsm_call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ampm_ComparePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindAllPhone
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[3b]"></a>Ampm_GsmGetCSQ</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ampm_gsm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Ampm_GsmGetCSQ &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ampm_gsm_startup.o(.text)
<LI> ampm_gsm_common.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>DialupAtCallback0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DialupAtCallback0 &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_dial_up.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>Ampm_GSM_DialUp_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSwithToIdle
</UL>

<P><STRONG><a name="[194]"></a>Ampm_GSM_DialUp_IsOk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[193]"></a>Ampm_GSM_DialUp_IsDone</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[177]"></a>Ampm_GSM_DialUp</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, ampm_gsm_dial_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ampm_GSM_DialUp &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[198]"></a>Ampm_GsmGotoCmdMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[339]"></a>Ampm_GsmGotoDataMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>Ampm_GsmSetApn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
</UL>

<P><STRONG><a name="[179]"></a>Ampm_SendAtCheck_IsEmpty</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_SendAtCheck_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdCheck_IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RecvSms_IsFinished
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
</UL>

<P><STRONG><a name="[17b]"></a>Ampm_AtCmdCheckResponse</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_AtCmdCheckResponse &rArr; InitFindData
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
</UL>

<P><STRONG><a name="[eb]"></a>Ampm_SendCommand</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Ampm_SendCommand &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[3c]"></a>Ampm_SetCmdOK</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_gsm_io.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[178]"></a>Ampm_SendAtCmd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ampm_SendAtCmd &rArr; Ampm_SendCmd &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_StartRecvSms
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
</UL>

<P><STRONG><a name="[17d]"></a>Ampm_SendAtCmdNow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmdNow
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv2
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv1
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsRecv0
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSent
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CSCA
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGF
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
</UL>

<P><STRONG><a name="[43]"></a>Ampm_GsmRecvCallback</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Ampm_GsmRecvCallback &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrComnandParser
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
</UL>
<BR>[Address Reference Count : 5]<UL><LI> ampm_gsm_dial_up.o(.constdata)
<LI> ampm_gsm_main_task.o(.constdata)
<LI> ampm_gsm_sms.o(.constdata)
<LI> ampm_gsm_io.o(.text)
<LI> ampm_gsm_common.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>Ampm_GsmSendCallback</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ampm_GsmSendCallback &rArr; COMM_Puts &rArr; USART1_PutString &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrParserInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
</UL>
<BR>[Address Reference Count : 5]<UL><LI> ampm_gsm_dial_up.o(.constdata)
<LI> ampm_gsm_main_task.o(.constdata)
<LI> ampm_gsm_sms.o(.constdata)
<LI> ampm_gsm_io.o(.text)
<LI> ampm_gsm_common.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>Ampm_CmdTask_SendCmd</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ampm_gsm_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_CmdTask_SendCmd &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
</UL>

<P><STRONG><a name="[45]"></a>Ampm_GsmMainCallPhaseFinished</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.constdata)
</UL>
<P><STRONG><a name="[33a]"></a>Ampm_GsmIsWorking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ampm_gsm_main_task.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>Ampm_MainSwithToIdle</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_MainSwithToIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_main_task.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>AMPM_GSM_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AMPM_GSM_Init &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_SetAuthentication
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSetApn
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[63]"></a>AMPM_GSM_MainTask</STRONG> (Thumb, 1764 bytes, Stack size 24 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AMPM_GSM_MainTask &rArr; AMPM_GSM_Startup &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Manage
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_SetConnect
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_IsLinked
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_IsDead
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_StartRecvSms
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTaskPeriodic_1Sec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsTask
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsCheckMessage_IsEmpty
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Ringing_GetPhase
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingTimer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingReset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingProcess
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingEnable
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RingingDisable
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_RecvSms_IsFinished
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGotoCmdMode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_IsDone
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_IsOk
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_DialUp_Reset
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[3a]"></a>Ampm_GSM_GetATI</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, ampm_gsm_main_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Ampm_GSM_GetATI &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_SetAuthenticationLogin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[19a]"></a>Ampm_RingingTimer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[18c]"></a>Ampm_Ringing_GetPhase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[195]"></a>Ampm_RingingDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[190]"></a>Ampm_RingingEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[186]"></a>Ampm_RingingReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[154]"></a>Ampm_SetRinging</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>Ampm_SetAtRing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_URC_RING_Process
</UL>

<P><STRONG><a name="[1ad]"></a>Ampm_SetAtClip</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_URC_CLIP_Process
</UL>

<P><STRONG><a name="[1a3]"></a>Ampm_SetAtCmti</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SMS_Process
</UL>

<P><STRONG><a name="[199]"></a>Ampm_RingingProcess</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, ampm_gsm_ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ampm_RingingProcess &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[51]"></a>Ampm_GsmSmsSendCallback_CMGF</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ampm_GsmSmsSendCallback_CMGF &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>Ampm_GsmSmsSendCallback_CSCA</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ampm_GsmSmsSendCallback_CSCA &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>Ampm_GsmSmsSent</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ampm_GsmSmsSent &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>Ampm_GsmCREG</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ampm_gsm_sms.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>Ampm_GsmSmsSendMessageCallback</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Ampm_GsmSmsSendMessageCallback &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>Ampm_GsmSmsSendCallback_CMGS</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Ampm_GsmSmsSendCallback_CMGS &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>Ampm_GsmSmsRecvCallback_CMGR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmSmsRecvCallback_CMGR &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>Ampm_GsmSmsRecvCallback_CMGD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ampm_GsmSmsRecvCallback_CMGD &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>Ampm_GsmSmsRecv0</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Ampm_GsmSmsRecv0 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>Ampm_GsmSmsRecv1</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Ampm_GsmSmsRecv1 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>Ampm_GsmSmsRecv2</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ampm_GsmSmsRecv2 &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>Ampm_StartRecvSms</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ampm_StartRecvSms &rArr; Ampm_SendAtCmd &rArr; Ampm_SendCmd &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[18a]"></a>Ampm_RecvSms_IsFinished</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_RecvSms_IsFinished &rArr; Ampm_SendAtCheck_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[185]"></a>Ampm_SmsTask_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_SmsTask_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[19b]"></a>Ampm_SmsTaskPeriodic_1Sec</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_SmsTaskPeriodic_1Sec &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[18b]"></a>Ampm_SmsTask</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ampm_SmsTask &rArr; Ampm_SendAtCmdNow &rArr; Ampm_SendCmdNow &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCmdNow
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendAtCheck_IsEmpty
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_IsIdle
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[197]"></a>Ampm_SmsCheckMessage_IsEmpty</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_SmsCheckMessage_IsEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[1a2]"></a>Ampm_SmsAddMsg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ampm_SmsAddMsg &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Sms_SendMsg
</UL>

<P><STRONG><a name="[e7]"></a>Ampm_Sms_SendMsg</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ampm_Sms_SendMsg &rArr; Ampm_SmsAddMsg &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SmsAddMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[55]"></a>Ampm_SMS_ReadMsg</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, ampm_gsm_sms.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>Ampm_GetServiceCenterNumber</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ampm_GetServiceCenterNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_sms.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>Ampm_SMS_URC_Incomming</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_SMS_URC_Incomming &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>Ampm_SMS_Process</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ampm_SMS_Process &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetAtCmti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>Ampm_SendSmsPolling</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, ampm_gsm_sms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Ampm_SendSmsPolling &rArr; Ampm_AtCmdCheckResponse &rArr; InitFindData
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_AtCmdCheckResponse
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Puts
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[187]"></a>AMPM_GSM_Startup_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AMPM_GSM_Startup_Init &rArr; InitTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[1a4]"></a>Ampm_GSM_GetSimCID</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Ampm_GSM_GetSimCID &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[1a5]"></a>Ampm_GSM_GetIMEI</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Ampm_GSM_GetIMEI &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ampm_gsm_startup.o(.text)
</UL>
<P><STRONG><a name="[188]"></a>AMPM_GSM_Startup</STRONG> (Thumb, 1346 bytes, Stack size 40 bytes, ampm_gsm_startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AMPM_GSM_Startup &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_CmdTask_SendCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_UartInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RESET_Clr
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RESET_Set
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_POWER_Clr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_POWER_Set
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_MOSFET_Off
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_MOSFET_On
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_DTR_Clr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[52]"></a>Ampm_URC_CLIP_Process</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_URC_CLIP_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetAtClip
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>Ampm_URC_RING_Process</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ampm_URC_RING_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SetAtRing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_parser.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>AT_CmdProcessInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AT_CmdProcessInit &rArr; StrParserInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrParserInit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ComnandParser
</UL>

<P><STRONG><a name="[146]"></a>AT_ComnandParser</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_command_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AT_ComnandParser &rArr; StrComnandParser &rArr; StrParserCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_CmdProcessInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrComnandParser
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[19e]"></a>pdu_encode</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pdu_encode &rArr; EncodePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePhoneNumber
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePDUMessage
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
</UL>

<P><STRONG><a name="[19d]"></a>pdu16_encode</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pdu16_encode &rArr; EncodePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePhoneNumber
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmSmsSendCallback_CMGS
</UL>

<P><STRONG><a name="[1b2]"></a>pdu_decode</STRONG> (Thumb, 308 bytes, Stack size 112 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePhoneNumber
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePDUMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapDecimalNibble
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[33b]"></a>GPS_PulseProcess</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>GPS_SetPulse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gps.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>GPRMC_Process</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gps.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>GPGGA_Process</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gps.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>GPGSA_Process</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gps.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>GPGSV_Process</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gps.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>GPS_ComnandParser</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPS_ComnandParser
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>neamFormatLatLng</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[10f]"></a>formatLatLng</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = formatLatLng &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGGA2info
</UL>

<P><STRONG><a name="[1b9]"></a>GpsGetInfo</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1ba]"></a>nmea_zero_INFO</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nmea_zero_INFO
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSInit
</UL>

<P><STRONG><a name="[89]"></a>GPSInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPSInit &rArr; nmea_zero_INFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_zero_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[1c9]"></a>nmea_GPGSV2info</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nmea_GPGSV2info
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInfo
</UL>

<P><STRONG><a name="[1bb]"></a>nmea_atoi</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nmea_atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>

<P><STRONG><a name="[1bd]"></a>nmea_atof</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>

<P><STRONG><a name="[1bf]"></a>nmea_scanf</STRONG> (Thumb, 558 bytes, Stack size 72 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nmea_scanf &rArr; nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atof
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
</UL>

<P><STRONG><a name="[1c1]"></a>nmea_parse_GPGSV</STRONG> (Thumb, 160 bytes, Stack size 96 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = nmea_parse_GPGSV &rArr; nmea_scanf &rArr; nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInfo
</UL>

<P><STRONG><a name="[1c8]"></a>nmea_GPGSA2info</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nmea_GPGSA2info
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInfo
</UL>

<P><STRONG><a name="[1c2]"></a>nmea_parse_GPGSA</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = nmea_parse_GPGSA &rArr; nmea_scanf &rArr; nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInfo
</UL>

<P><STRONG><a name="[1c3]"></a>nmea_GPGGA2info</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nmea_GPGGA2info &rArr; formatLatLng &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLatLng
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInfo
</UL>

<P><STRONG><a name="[1c4]"></a>_nmea_parse_time</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _nmea_parse_time &rArr; nmea_scanf &rArr; nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
</UL>

<P><STRONG><a name="[1c5]"></a>nmea_parse_GPGGA</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = nmea_parse_GPGGA &rArr; _nmea_parse_time &rArr; nmea_scanf &rArr; nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInfo
</UL>

<P><STRONG><a name="[1c6]"></a>nmea_GPRMC2info</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nmea_GPRMC2info &rArr; formatLatLng &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLatLng
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInfo
</UL>

<P><STRONG><a name="[1c7]"></a>nmea_parse_GPRMC</STRONG> (Thumb, 392 bytes, Stack size 96 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_scanf &rArr; nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nmea_parse_time
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_GetInfo
</UL>

<P><STRONG><a name="[a8]"></a>GPS_GetInfo</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GPS_GetInfo &rArr; nmea_parse_GPRMC &rArr; _nmea_parse_time &rArr; nmea_scanf &rArr; nmea_atof &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGGA2info
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGSA2info
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPGSV2info
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
</UL>

<P><STRONG><a name="[33d]"></a>nmea_calc_crc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gps.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>DbCalcCheckSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DbCalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveLog
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastRecord
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_ParaCheckErr
</UL>

<P><STRONG><a name="[1cd]"></a>DbCalcCheckSum16</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DbCalcCheckSum16
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Save
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_InitLog
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Load
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogSave
</UL>

<P><STRONG><a name="[1ca]"></a>DB_ParaCheckErr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DB_ParaCheckErr &rArr; DbCalcCheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveLog
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_InitLog
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadLog
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadEndLog
</UL>

<P><STRONG><a name="[1cb]"></a>DB_LoadEndLog</STRONG> (Thumb, 100 bytes, Stack size 128 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = DB_LoadEndLog &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_ParaCheckErr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_InitLog
</UL>

<P><STRONG><a name="[a4]"></a>DB_InitLog</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = DB_InitLog &rArr; DB_LoadEndLog &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadEndLog
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_ParaCheckErr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum16
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FlashMemInit
</UL>

<P><STRONG><a name="[102]"></a>DB_FloatToU32</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DB_FloatToU32 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveAll
</UL>

<P><STRONG><a name="[33e]"></a>DB_U32ToFloat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, db.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>DB_U32Load</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DB_U32Load &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum16
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FlashMemInit
</UL>

<P><STRONG><a name="[b8]"></a>DB_U32Save</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DB_U32Save &rArr; SST25_Write &rArr; _SST25_Write &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum16
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveAll
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
</UL>

<P><STRONG><a name="[1ce]"></a>DB_RingLogSave</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DB_RingLogSave &rArr; SST25_Write &rArr; _SST25_Write &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum16
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogReset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveLog
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogNext
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadNextLog
</UL>

<P><STRONG><a name="[ef]"></a>DB_RingLogReset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DB_RingLogReset &rArr; DB_RingLogSave &rArr; SST25_Write &rArr; _SST25_Write &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogSave
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[a5]"></a>DB_RingLogNext</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DB_RingLogNext &rArr; DB_RingLogSave &rArr; SST25_Write &rArr; _SST25_Write &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogSave
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromLog
</UL>

<P><STRONG><a name="[33f]"></a>DB_LogFill</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, db.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>DB_LoadLog</STRONG> (Thumb, 74 bytes, Stack size 128 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = DB_LoadLog &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_ParaCheckErr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadNextLog
</UL>

<P><STRONG><a name="[a6]"></a>DB_LoadNextLog</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = DB_LoadNextLog &rArr; DB_LoadLog &rArr; SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadLog
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogSave
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromLog
</UL>

<P><STRONG><a name="[be]"></a>DB_SaveLog</STRONG> (Thumb, 310 bytes, Stack size 152 bytes, db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = DB_SaveLog &rArr; DB_RingLogSave &rArr; SST25_Write &rArr; _SST25_Write &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogSave
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_ParaCheckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
</UL>

<P><STRONG><a name="[85]"></a>SST25_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SST25_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitHighFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[100]"></a>SST25_Erase</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogReset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Save
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveLog
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogSave
</UL>

<P><STRONG><a name="[1d4]"></a>__SST25_Write</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __SST25_Write &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Write
</UL>

<P><STRONG><a name="[1d5]"></a>_SST25_Write</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _SST25_Write &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
</UL>

<P><STRONG><a name="[1d6]"></a>_SST25_Read</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Read
</UL>

<P><STRONG><a name="[101]"></a>SST25_Write</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SST25_Write &rArr; _SST25_Write &rArr; SST25_Erase &rArr; SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Save
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveLog
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogSave
</UL>

<P><STRONG><a name="[f0]"></a>SST25_Read</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SST25_Read &rArr; _SST25_Read &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Save
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveLog
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_InitLog
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFirmwareFile
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Load
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadLog
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogSave
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadEndLog
</UL>

<P><STRONG><a name="[1d9]"></a>MMA7660_Write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mma7660.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MMA7660_Write &rArr; I2C_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Init
</UL>

<P><STRONG><a name="[12a]"></a>MMA7660_Read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mma7660.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MMA7660_Read &rArr; I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelerometer_Task_MMA7660
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_ReadStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Init
</UL>

<P><STRONG><a name="[12b]"></a>MMA7660_ReadStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mma7660.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MMA7660_ReadStatus &rArr; MMA7660_Read &rArr; I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelerometer_Task_MMA7660
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Init
</UL>

<P><STRONG><a name="[129]"></a>MMA7660_Init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, mma7660.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MMA7660_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_ReadStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Read
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7660_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelerometerTaskInit
</UL>

<P><STRONG><a name="[1dc]"></a>USB_Reset_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Reset_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1de]"></a>USB_Suspend_Event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Suspend_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[340]"></a>USB_Resume_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>USB_Configure_Event</STRONG> (Thumb, 28 bytes, Stack size 72 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USB_Configure_Event &rArr; GetInReport &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[5c]"></a>USB_EndPoint1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USB_EndPoint1 &rArr; SetOutReport &rArr; USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>EP_Reset</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EP_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
</UL>

<P><STRONG><a name="[1e3]"></a>EP_Status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
</UL>

<P><STRONG><a name="[8f]"></a>USB_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[90]"></a>USB_Connect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[1ea]"></a>USB_Reset</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>USB_Suspend</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[341]"></a>USB_Resume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>USB_WakeUp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2b7]"></a>USB_WakeUpCfg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
</UL>

<P><STRONG><a name="[1fe]"></a>USB_SetAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2b8]"></a>USB_Configure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[2b9]"></a>USB_ConfigEP</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[1f2]"></a>USB_DirCtrlEP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1e2]"></a>USB_EnableEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EnableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[1e4]"></a>USB_DisableEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DisableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[1e5]"></a>USB_ResetEP</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ResetEP &rArr; EP_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
</UL>

<P><STRONG><a name="[1e7]"></a>USB_SetStallEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetStallEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1e8]"></a>USB_ClrStallEP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ClrStallEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1e9]"></a>USB_ReadEP</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>

<P><STRONG><a name="[12d]"></a>USB_WriteEP</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbConfigTask
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
</UL>

<P><STRONG><a name="[342]"></a>USB_GetFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Suspend_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend_Event
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1dd]"></a>USB_ResetCore</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend_Event
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[1ed]"></a>USB_SetupStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_SetupStage &rArr; USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1ee]"></a>USB_DataInStage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1ef]"></a>USB_DataOutStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1f0]"></a>USB_StatusInStage</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1f1]"></a>USB_StatusOutStage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[5b]"></a>USB_EndPoint0</STRONG> (Thumb, 724 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USB_EndPoint0 &rArr; USB_Configure_Event &rArr; GetInReport &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReport
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetProtocol
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetIdle
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReport
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetProtocol
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIdle
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetInterface
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetConfiguration
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqSetClrFeature
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqGetStatus
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReqGetDescriptor
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>USB_HID_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_HID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbConfigTaskInit
</UL>

<P><STRONG><a name="[1e1]"></a>SetOutReport</STRONG> (Thumb, 38 bytes, Stack size 80 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SetOutReport &rArr; USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReport
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint1
</UL>

<P><STRONG><a name="[1e0]"></a>GetInReport</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GetInReport &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReport
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
</UL>

<P><STRONG><a name="[1f8]"></a>HID_GetReport</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HID_GetReport &rArr; GetInReport &rArr; USB_WriteEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1fd]"></a>HID_SetReport</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HID_SetReport &rArr; SetOutReport &rArr; USB_ReadEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1f9]"></a>HID_GetIdle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1fa]"></a>HID_SetIdle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1fb]"></a>HID_GetProtocol</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1fc]"></a>HID_SetProtocol</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[20b]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[206]"></a>get_fat</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[207]"></a>put_fat</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[132]"></a>f_mount</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = f_mount &rArr; find_volume &rArr; disk_initialize &rArr; MMC_disk_initialize &rArr; MMC_disk_info &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscInit
</UL>

<P><STRONG><a name="[f9]"></a>f_open</STRONG> (Thumb, 356 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastRecord
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
</UL>

<P><STRONG><a name="[fe]"></a>f_read</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastRecord
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[10b]"></a>f_write</STRONG> (Thumb, 496 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[228]"></a>f_sync</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[fb]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed_Pause
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastRecord
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
</UL>

<P><STRONG><a name="[229]"></a>f_chdir</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
</UL>

<P><STRONG><a name="[22a]"></a>f_getcwd</STRONG> (Thumb, 294 bytes, Stack size 120 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[fd]"></a>f_lseek</STRONG> (Thumb, 656 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastRecord
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
</UL>

<P><STRONG><a name="[105]"></a>f_opendir</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_CreateHierarchy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RemoveDir
</UL>

<P><STRONG><a name="[130]"></a>f_closedir</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
</UL>

<P><STRONG><a name="[106]"></a>f_readdir</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RemoveDir
</UL>

<P><STRONG><a name="[22b]"></a>f_stat</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[22c]"></a>f_getfree</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = f_getfree &rArr; find_volume &rArr; disk_initialize &rArr; MMC_disk_initialize &rArr; MMC_disk_info &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
</UL>

<P><STRONG><a name="[22d]"></a>f_truncate</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[fa]"></a>f_unlink</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RemoveDir
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
</UL>

<P><STRONG><a name="[109]"></a>f_mkdir</STRONG> (Thumb, 376 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_CreateHierarchy
</UL>

<P><STRONG><a name="[22e]"></a>f_chmod</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[22f]"></a>f_utime</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[230]"></a>f_rename</STRONG> (Thumb, 300 bytes, Stack size 136 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[231]"></a>f_getlabel</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[232]"></a>f_setlabel</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[ff]"></a>f_mkfs</STRONG> (Thumb, 1594 bytes, Stack size 112 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = f_mkfs &rArr; disk_initialize &rArr; MMC_disk_initialize &rArr; MMC_disk_info &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
</UL>

<P><STRONG><a name="[233]"></a>f_gets</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[235]"></a>f_putc</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[236]"></a>f_puts</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[237]"></a>f_printf</STRONG> (Thumb, 632 bytes, Stack size 160 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[241]"></a>MMC_disk_ioctl</STRONG> (Thumb, 730 bytes, Stack size 72 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_info
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[242]"></a>MMC_disk_info</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MMC_disk_info &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>

<P><STRONG><a name="[243]"></a>MMC_disk_initialize</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MMC_disk_initialize &rArr; MMC_disk_info &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitHighFreq
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitLowFreq
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_info
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[24e]"></a>MMC_disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mmc_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[246]"></a>MMC_disk_read</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MMC_disk_read &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[247]"></a>MMC_disk_write</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[248]"></a>MMC_disk_multiple_write_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mmc_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[249]"></a>MMC_disk_multiple_write_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mmc_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>

<P><STRONG><a name="[24a]"></a>MMC_disk_multiple_write</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mmc_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
</UL>

<P><STRONG><a name="[24b]"></a>MMC_disk_multiple_read_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mmc_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[24c]"></a>MMC_disk_multiple_read_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mmc_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[24d]"></a>MMC_disk_multiple_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mmc_ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[111]"></a>disk_timerproc</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mmc_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[21b]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[20f]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[131]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = disk_initialize &rArr; MMC_disk_initialize &rArr; MMC_disk_info &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[223]"></a>disk_status</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[202]"></a>disk_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = disk_read &rArr; MMC_disk_read &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[200]"></a>disk_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[205]"></a>disk_ioctl</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = disk_ioctl &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[225]"></a>get_fattime</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[253]"></a>resolv_appcall</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = resolv_appcall &rArr; newdata
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resolv.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>resolv_query</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = resolv_query &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Query
</UL>

<P><STRONG><a name="[255]"></a>resolv_lookup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = resolv_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Lookup
</UL>

<P><STRONG><a name="[343]"></a>resolv_getserver</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, resolv.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>resolv_conf</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = resolv_conf &rArr; udp_new &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Manage
</UL>

<P><STRONG><a name="[259]"></a>resolv_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESOLVER_Manage
</UL>

<P><STRONG><a name="[192]"></a>RESOLVER_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, resolver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RESOLVER_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[191]"></a>RESOLVER_Manage</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, resolver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RESOLVER_Manage &rArr; resolv_conf &rArr; udp_new &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[11e]"></a>RESOLVER_Lookup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, resolver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RESOLVER_Lookup &rArr; resolv_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
</UL>

<P><STRONG><a name="[25a]"></a>RESOLVER_Query</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, resolver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
</UL>

<P><STRONG><a name="[250]"></a>resolv_found</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, resolver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>

<P><STRONG><a name="[26d]"></a>tcpip_uipcall</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpip_uipcall
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[121]"></a>tcp_connect</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_connect &rArr; uip_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_connect
</UL>

<P><STRONG><a name="[258]"></a>udp_new</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = udp_new &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_conf
</UL>

<P><STRONG><a name="[25d]"></a>tcp_listen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>

<P><STRONG><a name="[25f]"></a>tcp_unlisten</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_unlisten
</UL>

<P><STRONG><a name="[344]"></a>tcp_attach</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>timer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_SetHostAddr
</UL>

<P><STRONG><a name="[345]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>timer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_restart
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
</UL>

<P><STRONG><a name="[263]"></a>timer_expired</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
</UL>

<P><STRONG><a name="[346]"></a>uip_setipid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>uip_add32</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[120]"></a>uip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>

<P><STRONG><a name="[264]"></a>uip_chksum</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>

<P><STRONG><a name="[266]"></a>uip_ipchksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ipchksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[268]"></a>uip_tcpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[269]"></a>uip_udpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[284]"></a>uip_init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[25b]"></a>uip_connect</STRONG> (Thumb, 246 bytes, Stack size 12 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[25c]"></a>uip_udp_new</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>

<P><STRONG><a name="[260]"></a>uip_unlisten</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unlisten
</UL>

<P><STRONG><a name="[25e]"></a>uip_listen</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
</UL>

<P><STRONG><a name="[26c]"></a>uip_process</STRONG> (Thumb, 3826 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uip_process &rArr; uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_uipcall
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
</UL>

<P><STRONG><a name="[347]"></a>uip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>uip_send</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Callback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddata
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>

<P><STRONG><a name="[11d]"></a>Domain_IpCheck</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uip_ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
</UL>

<P><STRONG><a name="[26e]"></a>UIP_SetHostAddr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UIP_SetHostAddr &rArr; timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerUp
</UL>

<P><STRONG><a name="[280]"></a>UIP_Input</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uip_ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
</UL>

<P><STRONG><a name="[26f]"></a>UIP_Periodic</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, uip_ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UIP_Periodic &rArr; uip_process &rArr; uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[271]"></a>FCS_Get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__In
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
</UL>

<P><STRONG><a name="[348]"></a>FCS_Calculate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fcs.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>PPP_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_MainSwithToIdle
</UL>

<P><STRONG><a name="[184]"></a>PPP_SetAuthentication</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPP_SetAuthentication
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Init
</UL>

<P><STRONG><a name="[19c]"></a>PPP_SetAuthenticationLogin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GSM_GetATI
</UL>

<P><STRONG><a name="[196]"></a>PPP_SetConnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[18e]"></a>PPP_IsDead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[270]"></a>PPP_Send</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PPP_Send &rArr; COMM_Putc &rArr; USART1_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Putc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigAck
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigNackRej
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermAck
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendEchoReply
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
</UL>

<P><STRONG><a name="[281]"></a>PPP__In</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PPP__In &rArr; PPP__ProcessPacket &rArr; PPP__ManageState &rArr; PPP__ThisLayerUp &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCS_Get
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[18d]"></a>PPP_ManageLink</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PPP_ManageLink &rArr; PPP__In &rArr; PPP__ProcessPacket &rArr; PPP__ManageState &rArr; PPP__ThisLayerUp &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CarrierDetected
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__In
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Open
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Timer
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerDown
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Periodic
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[134]"></a>PPP_ReInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PPP_ReInit &rArr; PPP__ThisLayerDown &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
</UL>

<P><STRONG><a name="[18f]"></a>PPP_IsLinked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ppp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_MainTask
</UL>

<P><STRONG><a name="[123]"></a>FTP_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ftp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTaskInit
</UL>

<P><STRONG><a name="[124]"></a>FTP_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ftp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
</UL>

<P><STRONG><a name="[349]"></a>FTP_Task_IsIdle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ftp.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>FTPGetFileName</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ftp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.text)
</UL>
<P><STRONG><a name="[286]"></a>FTPListFile</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTPListFile &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.text)
</UL>
<P><STRONG><a name="[289]"></a>FTPGetPass</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ftp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.text)
</UL>
<P><STRONG><a name="[288]"></a>FTPGetUser</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>FTP_Manage</STRONG> (Thumb, 2964 bytes, Stack size 744 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = FTP_Manage &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveLog
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_put
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_mkd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_list
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_get
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_connect
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_IsBusy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTcpIpTask
</UL>

<P><STRONG><a name="[34a]"></a>ftpc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ftpc.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>ftpc_data_appcall</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = ftpc_data_appcall &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpc.o(.text)
</UL>
<P><STRONG><a name="[295]"></a>ftpc_control_appcall</STRONG> (Thumb, 856 bytes, Stack size 8 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ftpc_control_appcall &rArr; newdata &rArr; handle_input &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acked
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftpc.o(.text)
</UL>
<P><STRONG><a name="[287]"></a>ftpc_connect</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ftpc_connect &rArr; tcp_connect &rArr; uip_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
</UL>

<P><STRONG><a name="[28c]"></a>ftpc_list</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ftpc_list &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
</UL>

<P><STRONG><a name="[28e]"></a>ftpc_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ftpc_get &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
</UL>

<P><STRONG><a name="[28f]"></a>ftpc_put</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ftpc_put &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
</UL>

<P><STRONG><a name="[296]"></a>ftpc_update_svr_file_name</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ftpc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
</UL>

<P><STRONG><a name="[34b]"></a>ftpc_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ftpc.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>ftpc_cwd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ftpc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[28d]"></a>ftpc_mkd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftpc_mkd &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
</UL>

<P><STRONG><a name="[34c]"></a>ftpc_cdup</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ftpc.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>CAM_crc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, camera.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>CAM_crc16</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, camera.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>CAM_Init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAM_Init &rArr; SendCmd &rArr; USART3_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[6a]"></a>CAM_TakeSnapshot</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CAM_TakeSnapshot &rArr; TIME_GetSec &rArr; mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_GetSec
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[28b]"></a>CAM_IsBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, camera.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
</UL>

<P><STRONG><a name="[6b]"></a>CAM_Manage</STRONG> (Thumb, 1054 bytes, Stack size 304 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = CAM_Manage &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_FromSec
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbCalcCheckSum
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[34f]"></a>CAM_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, camera.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>CAM_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, camera.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>CAM_ChangeId</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, camera.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[68]"></a>CAM_Input</STRONG> (Thumb, 786 bytes, Stack size 16 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAM_Input &rArr; ProcessCmd &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
</UL>

<P><STRONG><a name="[e5]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[40]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniConfigParser
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastRecord
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadLog
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_LoadEndLog
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atof
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_URC_CLIP_Process
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__CheckLCPOptions
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigAck
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermAck
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendEchoReply
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_ReLoad
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Callback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsGetInfo
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_Cmd_Task
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmdNow
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCmd
</UL>

<P><STRONG><a name="[351]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[352]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_InitLog
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniConfigParser
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS_TaskInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSA
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGSV
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_zero_INFO
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_connect
</UL>

<P><STRONG><a name="[354]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c1]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
</UL>

<P><STRONG><a name="[6c]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Callback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[254]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_cwd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddata
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_mkd
</UL>

<P><STRONG><a name="[c2]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber_1
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_ComparePhoneNumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPRMC
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_parse_GPGGA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodePhoneNumber
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFindData
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddata
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
</UL>

<P><STRONG><a name="[256]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTPListFile
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_lookup
</UL>

<P><STRONG><a name="[1c0]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_scanf
</UL>

<P><STRONG><a name="[9c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_U32Save
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Save
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RingLogSave
</UL>

<P><STRONG><a name="[6d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgProcessData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFG_Load
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_GPRS_Task
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_SetAuthentication
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_data_appcall
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddata
</UL>

<P><STRONG><a name="[e8]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_SVR_Manage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRMWARE_Manage
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_GSM_Startup
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[29d]"></a>_scanf_int</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2b6]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2b2]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[2a1]"></a>_scanf_really_real</STRONG> (Thumb, 560 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1bc]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atoi
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[ed]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[2a7]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Task
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLatLng
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neamFormatLatLng
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[2ad]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Task
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLatLng
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neamFormatLatLng
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Task
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLatLng
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_GPRMC2info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neamFormatLatLng
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Task
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLatLng
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Task
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neamFormatLatLng
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neamFormatLatLng
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveAll
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FlashMemInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Task
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FlashMemInit
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FlashMemInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_TakeSnapshot
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Task
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FloatToU32
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_FlashMemInit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_GsmGetCSQ
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackerTask
</UL>

<P><STRONG><a name="[355]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2af]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[356]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[357]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[358]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[29c]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[3d]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> strtod.o(.text)
<LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> strtod.o(.text)
<LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[2a3]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2b3]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[359]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2a5]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2ac]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2ab]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[2a0]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2b4]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[35a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>__vfscanf</STRONG> (Thumb, 806 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[35b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>USB_ReqGetDescriptor</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, usbcore.o(i.USB_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReqGetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1f3]"></a>USB_ReqGetStatus</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, usbcore.o(i.USB_ReqGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1f4]"></a>USB_ReqSetClrFeature</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, usbcore.o(i.USB_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_ReqSetClrFeature &rArr; USB_ClrStallEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1f6]"></a>USB_ReqSetConfiguration</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, usbcore.o(i.USB_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_ReqSetConfiguration &rArr; USB_DisableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[1f7]"></a>USB_ReqSetInterface</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, usbcore.o(i.USB_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_ReqSetInterface &rArr; USB_DisableEP &rArr; EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2ba]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[35d]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c0]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendSmsPolling
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_SaveSpeed
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrackerPacket
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CfgParse
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_files
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Manage
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB__Print2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastRecord
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_CreateHierarchy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DB_RemoveDir
</UL>

<P><STRONG><a name="[35e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[35f]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2bc]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[360]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[361]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[f4]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ampm_SendCommand
</UL>

<P><STRONG><a name="[362]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[2a4]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[363]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[364]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[365]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[366]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2a2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1b8]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLatLng
</UL>

<P><STRONG><a name="[1be]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmea_atof
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9a]"></a>NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcuTask
</UL>

<P><STRONG><a name="[136]"></a>SetSysClockTo48</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[135]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[152]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[153]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[1b4]"></a>SwapDecimalNibble</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[1b1]"></a>EncodePDUMessage</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EncodePDUMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
</UL>

<P><STRONG><a name="[1b5]"></a>DecodePDUMessage</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[1b0]"></a>EncodePhoneNumber</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, pdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EncodePhoneNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_encode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu16_encode
</UL>

<P><STRONG><a name="[1b3]"></a>DecodePhoneNumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pdu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_decode
</UL>

<P><STRONG><a name="[1d1]"></a>SST25__Status</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SST25_Read
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__GlobalProtect
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteDisable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__WriteEnable
</UL>

<P><STRONG><a name="[1d3]"></a>SST25__WriteEnable</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sst25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SST25__WriteEnable &rArr; SST25__Status &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25_Erase
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SST25_Write
</UL>

<P><STRONG><a name="[1d7]"></a>SST25__WriteDisable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sst25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>

<P><STRONG><a name="[1d8]"></a>SST25__GlobalProtect</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sst25.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25__Status
</UL>

<P><STRONG><a name="[211]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[204]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[214]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[21d]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1ff]"></a>sync_window</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[201]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[203]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sync_fs &rArr; disk_ioctl &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[208]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[209]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[227]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[20a]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[20c]"></a>dir_next</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[20d]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[21f]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[226]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[20e]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[216]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[218]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[210]"></a>gen_numname</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[213]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[212]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[215]"></a>dir_read</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
</UL>

<P><STRONG><a name="[217]"></a>dir_register</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[219]"></a>dir_remove</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[21a]"></a>get_fileinfo</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
</UL>

<P><STRONG><a name="[21c]"></a>create_name</STRONG> (Thumb, 638 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[21e]"></a>follow_path</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[222]"></a>get_ldnumber</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[220]"></a>check_fs</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_disk_write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[221]"></a>find_volume</STRONG> (Thumb, 890 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = find_volume &rArr; disk_initialize &rArr; MMC_disk_initialize &rArr; MMC_disk_info &rArr; MMC_disk_ioctl &rArr;  MMC_disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getcwd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chdir
</UL>

<P><STRONG><a name="[224]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[234]"></a>putc_bfd</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[238]"></a>wait_ready</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wait_ready &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[239]"></a>deselect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = deselect &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_multiple_write_stop
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_write
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_read
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[23a]"></a>select</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = select &rArr; wait_ready &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
</UL>

<P><STRONG><a name="[244]"></a>power_on</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mmc_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>

<P><STRONG><a name="[23b]"></a>power_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = power_off &rArr; select &rArr; wait_ready &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>

<P><STRONG><a name="[23c]"></a>rcvr_datablock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rcvr_datablock &rArr; halSpiReadMutilByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiReadMutilByte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_multiple_read
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_read
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
</UL>

<P><STRONG><a name="[23e]"></a>xmit_datablock</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xmit_datablock &rArr; wait_ready &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteMutilByte
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_multiple_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_multiple_write_stop
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_write
</UL>

<P><STRONG><a name="[240]"></a>send_cmd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, mmc_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_multiple_read_stop
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_multiple_read_start
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_multiple_write_start
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_write
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_read
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_ioctl
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[252]"></a>parse_name</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
</UL>

<P><STRONG><a name="[24f]"></a>check_entries</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_entries &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[251]"></a>newdata</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = newdata
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[265]"></a>chksum</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[267]"></a>upper_layer_chksum</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[26a]"></a>uip_add_rcv_nxt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_add_rcv_nxt
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[272]"></a>PPP__SendEchoReply</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PPP__SendEchoReply &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[273]"></a>PPP__SendTermReq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PPP__SendTermReq &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[274]"></a>PPP__ThisLayerDown</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = PPP__ThisLayerDown &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ReInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[276]"></a>PPP__SendCodeRej</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PPP__SendCodeRej &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[277]"></a>PPP__SendConfigReq</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = PPP__SendConfigReq &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[278]"></a>PPP__SendTermAck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PPP__SendTermAck &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[279]"></a>PPP__SendConfigNackRej</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PPP__SendConfigNackRej &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[27a]"></a>PPP__SendConfigAck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PPP__SendConfigAck &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_Send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[27b]"></a>PPP__ThisLayerUp</STRONG> (Thumb, 996 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = PPP__ThisLayerUp &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_SetHostAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[27c]"></a>PPP__ThisLayerFinished</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = PPP__ThisLayerFinished &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[27d]"></a>PPP__ThisLayerStarted</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PPP__ThisLayerStarted &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>

<P><STRONG><a name="[275]"></a>PPP__ManageState</STRONG> (Thumb, 1654 bytes, Stack size 16 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PPP__ManageState &rArr; PPP__ThisLayerUp &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerStarted
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerFinished
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerUp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigAck
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigNackRej
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermAck
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendCodeRej
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerDown
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendTermReq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendEchoReply
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Open
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__Timer
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerFinished
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerUp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__SendConfigReq
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ThisLayerDown
</UL>

<P><STRONG><a name="[27e]"></a>PPP__CheckLCPOptions</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PPP__CheckLCPOptions &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ProcessPacket
</UL>

<P><STRONG><a name="[27f]"></a>PPP__ProcessPacket</STRONG> (Thumb, 844 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PPP__ProcessPacket &rArr; PPP__ManageState &rArr; PPP__ThisLayerUp &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__CheckLCPOptions
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIP_Input
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__In
</UL>

<P><STRONG><a name="[282]"></a>PPP__Timer</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PPP__Timer &rArr; PPP__ManageState &rArr; PPP__ThisLayerUp &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Get
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[283]"></a>PPP__Open</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ppp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PPP__Open &rArr; PPP__ManageState &rArr; PPP__ThisLayerUp &rArr;  PPP__ManageState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP__ManageState
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_ManageLink
</UL>

<P><STRONG><a name="[290]"></a>senddata</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = senddata &rArr; ampm_sprintf &rArr; ampm_vsprintf &rArr; ampm_f_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ampm_sprintf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_control_appcall
</UL>

<P><STRONG><a name="[292]"></a>handle_input</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = handle_input &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
</UL>

<P><STRONG><a name="[293]"></a>newdata</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = newdata &rArr; handle_input &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_control_appcall
</UL>

<P><STRONG><a name="[294]"></a>acked</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, ftpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = acked &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftpc_control_appcall
</UL>

<P><STRONG><a name="[298]"></a>SendCmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendCmd &rArr; USART3_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Manage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ChangeId
</UL>

<P><STRONG><a name="[29a]"></a>ProcessCmd</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ProcessCmd &rArr; DbgCfgPrintf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgCfgPrintf
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_Input
</UL>

<P><STRONG><a name="[2bd]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2bb]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[2bf]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2be]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[41]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[29f]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3f]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2b1]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
